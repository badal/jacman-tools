#!/usr/bin/env ruby
# encoding: utf-8

# File: collective_exploitation_central_widget.rb
# Created: 29 april 2015
#
# (c) Michel Demazure <michel@demazure.com>

require_relative('config_button.rb')

# script methods for Jacinthe Management
module JacintheManagement
  module GuiQt
    # Central widget for collective subscriptions
    class CollectiveExploitationCentralWidget < CentralWidget
      include ConfigButton
      # version of the collective_manager
      VERSION = '0.3.0'
      # "About" specific message
      SPECIFIC = [
        "   jacman_coll : #{JacintheManagement::Coll::VERSION}",
        "   collective exploitation manager : #{VERSION}"
      ]
      # "About message"
      ABOUT = GuiQt.tools_versions(SPECIFIC)

      SIGNAL_EDITING_FINISHED = SIGNAL('editingFinished()')
      SIGNAL_CLICKED = SIGNAL(:clicked)
      HELP_FILE = File.join(File.dirname(__FILE__), '../help_files/collective_help.pdf')

      def initialize(mode = false)
        @mode = mode
        super()
      end

      # @return [[Integer] * 4] geometry of mother window
      def geometry
        if Utils.on_mac?
          [100, 100, 600, 650]
        else
          [100, 100, 400, 500]
        end
      end

      # @return [String] name of manager specialty
      def subtitle
        'Exploitation des abonnements collectifs'
      end

      # @return [Array<String>] about message
      def about
        [subtitle] + ABOUT
      end

      # build the layout
      def build_layout
        init_values
        add_config_area
        build_name_line
        build_report_area
        build_command_area
        load_all_collectives
      end

      # build the config aera
      def add_config_area
        button = add_config_button
        connect(button, SIGNAL_CLICKED) do
          new_central_widget = CollectiveExploitationCentralWidget.new(!@mode)
          parent.central_widget = new_central_widget
        end
      end

      # fix initial values
      def init_values
        @journals = Coll.journals
        @subscriber = nil
      end

      # load all collectives from the database
      def load_all_collectives
        @collectives = Coll::Collective.extract_all
        @collective_names = @collectives.map(&:name_space_year)
        @name_select.add_items(@collective_names)
        report 'Abonnements disponibles'
        @collective_names.each { |name| report name }
        report 'Sélectionner un abonnement'
      end

      # build the corresponding part
      def build_name_line
        box = Qt::HBoxLayout.new
        add_layout(box)
        box.add_widget(Qt::Label.new('<b>Abonnement collectif :</b>'))
        @name_select = Qt::ComboBox.new
        connect(@name_select, SIGNAL('activated(const QString&)')) { load_collective }
        box.add_widget(@name_select)
        box.add_stretch
      end

      # build the corresponding part
      def build_report_area
        @report = Qt::TextEdit.new('')
        add_widget(@report)
        @report.read_only = true
        @report.append("<b>Mode #{@mode ? 'réel' : 'simulé'}</b>")
      end

      # build the corresponding part
      def build_command_area
        add_widget(Qt::Label.new('<b>Actions</b>'))
        box = Qt::HBoxLayout.new
        add_layout(box)
        load_tiers = Qt::PushButton.new('Lire liste de tiers')
        connect(load_tiers, SIGNAL_CLICKED) { add_tiers_list }
        box.add_widget(load_tiers)
        process = Qt::PushButton.new('Créer les abonnements')
        connect(process, SIGNAL_CLICKED) { process_collective }
        box.add_widget(process)
        save = Qt::PushButton.new('Enregistrer le rapport')
        connect(save, SIGNAL_CLICKED) { save_report }
        box.add_widget(save)
      end

      # show an error message
      # @param [String] message message to show
      def error(message)
        @report.append('<font color=red><b>' 'ERREUR</b> : </color> ' + message)
      end

      # show an report message
      # @param [String] message message to show
      def report(message)
        @report.append(message)
      end

      # add a horizontal line in the report area
      def report_line
        @report.append('-' * 30)
      end

      # WARNING: overrides the common one, useless in this case
      def update_values
      end

      # Slot: open the help file
      def help
        url = Qt::Url.new("file:///#{HELP_FILE}")
        Qt::DesktopServices.openUrl(url)
      end

      ## Controller methods

      # try and load the collective
      def load_collective
        selected = @collectives.find { |coll| coll.name_space_year == @name_select.current_text }
        return unless selected
        @subscriber = Coll::Subscriber.new(selected, @mode)
        report_line
        report selected.report.join("\n")
        report_line
      end

      # slot
      def process_name_field
        @name = @name_field.text.strip
        load_collective if @extracting
      end

      # ask for a file, read it and return lines consisting of a integer
      #
      # @return [Array<Integer>] list of tiers id
      def read_tiers_list_file
        filename = Qt::FileDialog.getOpenFileName(self,
                                                  'Charger une liste de tiers',
                                                  '',
                                                  '')
        return [] unless filename
        File.readlines(filename)
      end

      # ask for a file, read it and return lines consisting of a integer
      #   with error management
      # @return [Array<Integer>] list of tiers id
      def load_tiers_list
        lines = read_tiers_list_file
        tiers_list = lines.map { |line| line.strip.to_i }.sort.uniq.select { |val| val > 0 }
        if tiers_list.size > 0
          report "Liste : #{tiers_list.size} tiers"
        else
          error 'Liste vide'
        end
        tiers_list
      end

      # add a tiers list to @collective
      #
      def add_tiers_list
        unless @subscriber
          error 'Charger l\'abonnement collectif'
          return
        end
        tiers_list = load_tiers_list
        return unless tiers_list.size > 0
        rpt = @subscriber.add_tiers_list(tiers_list)
        rpt.each { |line| error(line) }
        report "#{@subscriber.client_list.size} tiers/clients"
        report_line
      end

      # process the given subscriber
      def process_collective
        subs = @subscriber.process
        subs.each { |line| report line }
      end

      # save the report area content in a file
      def save_report
        path = Qt::FileDialog.getSaveFileName(self, 'Enregistrer ?', 'report.txt', '*.txt')
        File.write(path, @report.to_plain_text) if path
      end
    end
  end
end
